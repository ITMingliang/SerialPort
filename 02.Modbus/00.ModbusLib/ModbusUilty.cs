using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ModbusLib
{

    public class ModbusUilty
    {

        //创建一个串口通信对象
        private SerialPort CurrentCOM = null;

        //构造方法初始化
        public ModbusUilty()
        {
                CurrentCOM = new SerialPort();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="portName">端口号</param>
        /// <param name="baudRate">波特率</param>
        /// <param name="parity">校验位</param>
        /// <param name="dataBits">数据位</param>
        /// <param name="stopBits">停止位</param>
        public void OpenCOM(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            //设置一些通信参数
            CurrentCOM.PortName = portName;
            CurrentCOM.BaudRate = baudRate;
            CurrentCOM.Parity = parity;
            CurrentCOM.DataBits = dataBits;
            CurrentCOM.StopBits = stopBits;

            if (CurrentCOM.IsOpen)
            {
                CurrentCOM.Close();

            }

            //打开串口
            CurrentCOM.Open();
        }

        /// <summary>
        /// 关闭串口
        /// </summary>
        public void CloseCOM()
        {
            if (CurrentCOM.IsOpen)
            {
                CurrentCOM.Close();

            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="slaveId">从站地址</param>
        /// <param name="startAddress">起始寄存器</param>
        /// <param name="count">数量/param>
        /// <returns返回的字节数组</returns>
        public byte [] ReadRegisters(byte slaveId, ushort startAddress, ushort count)
        {
            //拼接报文

            //创建一个集合对象
            List<byte> SendCommand = new List<byte>();

            //从站地址+功能码+起始高位+起始低位+数量高位+数量低位+CRC校验
            SendCommand.Add(slaveId);
            SendCommand.Add(0x03);

            //地址高低位
            SendCommand.Add((byte)(startAddress / 256));
            SendCommand.Add((byte)(startAddress % 256));

            //数量高低位
            SendCommand.Add((byte)(count / 256));
            SendCommand.Add((byte)(count % 256));

            //校验前六位
            byte[] crc = Crc16(SendCommand.ToArray(), 6);
            SendCommand.AddRange(crc);  

            //发送报文
            CurrentCOM.Write(SendCommand.ToArray(), 0, SendCommand.Count);

            Thread.Sleep(100);

            //接收报文
            byte [] buff=new byte[CurrentCOM.BytesToRead];
            CurrentCOM.Read(buff, 0, buff.Length);

            //验证报文
            if(CheckCRC(buff))
            {
                if (buff.Length==5+2*count)
                {
                    if (buff[0]==slaveId && buff[1]==0x03)
                    {
                        //解析报文
                        byte [] result=new byte[count * 2];
                        Array.Copy(buff, 3, result, 0, count * 2);

                        return result;

                    }
                }
            }

            return null;
        }


        #region CRC校验
        // CRC 高位字节值表
        private static readonly byte[] aucCRCHi = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};
        // CRC 低位字节值表
        private static readonly byte[] aucCRCLo = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

        //CRC校验
        //一次性校验完成
        private bool CheckCRC(byte [] value)
        {

            if (value==null)
            {
                return false;
            }

            if (value.Length<=2)
            {
                return false;
            }

            int length=value.Length;
            byte [] buf=new byte[length - 2];
            Array.Copy(value, 0, buf, 0, buf.Length);

            byte[] CRCbuf = Crc16(buf, buf.Length);

            //注意高低位
            if (CRCbuf[0]==value[length-2] && CRCbuf[1]==value[length-1])
            {
                return true;
            }

            return false;   
        }

        private byte [] Crc16(byte[] pucFram,int usLen)
        {
            int i=0;
            byte[] res = new byte[2] { 0xFF, 0XFF };
            ushort iInddex;
            while (usLen-->0)
            {
                iInddex = (ushort)(res[0] ^ pucFram[i++]);
                res[0] = (byte)(res[1] ^ aucCRCHi[iInddex]);
                res[1] = aucCRCLo[iInddex];
            }
            return res; 

        }

        //CRC校验
        //按位进行逐个进行校验

        //  modbus_fasong[6] = (byte) CRC(modbus_fasong,6);//校验位,低8位
        //  modbus_fasong[7] = (byte) (CRC(modbus_fasong, 6)>>8);//校验位 高8位
        public uint CRC(byte[] s_strPuchMsg, int len)
        {
            uint crc16 = 0xFFFF;
            for (int i = 0; i < len; i++)
            {
                crc16 ^= s_strPuchMsg[i];
                for (int j = 0; j < 8; j++)
                {
                    if ((crc16 & 0x01) == 1)
                    {
                        crc16 = (crc16 >> 1) ^ 0xA001;

                    }
                    else
                    {
                        crc16 = crc16 >> 1;
                    }
                }
            }
            return crc16;
        }

        #endregion
    }
}
